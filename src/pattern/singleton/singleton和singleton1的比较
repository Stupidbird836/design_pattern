/**
 * 首先在Jvm中，某个线程访问堆上的线程共享变量的时候，会将该变量临时拷贝到自己的本地虚拟机栈中，该区域是线程独享的。
 * 但是对象创建实例的过程中，一般是
 * 分配内存空间
 * 初始化对象
 * 将内存空间的地址赋值给对应的引用（这时候创建出对象了）
 * 然而在实例化的过程中可能会出现指令重排，导致以下顺序了
 * 分配内存空间
 * 将内存空间的地址赋值给对应的引用（这时候创建出对象了）
 * 初始化对象
 * 在没有完全初始化完成对象的时候（执行无参构造中的方法，如果方法中有赋值的话），可能对变量的赋值就进行了一半或者正要开始赋值，这时候另一个线程将该对象复制走了，那么该对象就会拿到一个数据不健全的对象，这样就导致了数据缺失的问题
 * 使用volatile关键字保证了在实例化对象的期间不会进行指令重排，保证了数据的完整性
 */